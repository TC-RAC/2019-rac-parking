library(RefManageR)
library(googlesheets4)
if (!require("pacman")) install.packages("pacman")
if (!require("pacman")) install.packages("pacman")
pacman::p_load( tidyr,dplyr,tibble,RefManageR,googlesheets4)
# load existing master file
master <- readRDS("data/03-processed/master.rds")
bib.master <- readRDS("data/03-processed/bib.master.rds")
# new report name
report.name <- paste0("wales-report-", current.year, "-",
current.year - 1999)
if (!file.exists("data/01-raw/rpi.csv") |
format(file.mtime("data/01-raw/rpi.csv"), "%d.%m.%Y") !=
format(Sys.Date(), "%d.%m.%Y")) {
url <- paste0("https://docs.google.com/spreadsheets/d/",
"1joRISS6YV3eusMNgFPaHfrtsiPN1skM-mpEZJqD3FUg/",
"edit?pli=1#gid=1538913200")
rpi<-read_sheet(url, sheet = "Inflation, last 10 years")
names(rpi)[2]<-"Cost.of.Living"
write.csv(rpi,"data/01-raw/rpi.csv")
}
if (add.new.data){
################################################################################
## AUTOMATIC DATA IMPORT AND CLEANING
################################################################################
path <- "data/01-raw/"
# read all expenditure data, remove extra row and column
wal.income.total <- read.csv(paste0(path, wal.income.file))[-1,-1]
# read all income data, remove extra row and column
wal.expend.total <- read.csv(paste0(path, wal.expenditure.file))[-1,-1]
# read all transport total data, remove extra row and column
wal.transport.total <- read.csv(paste0(path, wal.transport.file))[-1,-1]
# reshape all three dfs - you can ignore the warnigns here!
wal.expend.total<- FunWalesReshape(wal.expend.total)
wal.income.total<- FunWalesReshape(wal.income.total)
wal.transport.total<- FunWalesReshape(wal.transport.total)
# join them together and calculate surplus
wal.expend.total %>%
left_join(wal.income.total) %>%
left_join(wal.transport.total) %>%
mutate(income.total = -income.total,
surplus.total = income.total - expend.total) %>%
filter(year == current.year) -> update
# add Wales specific data
update %>%
mutate(country = "Wales",
auth.type = "LA")  -> update
# double check the update is OK:
if (nrow(update) != 22) {
paste("Something is wrong. The update should have 22 rows, but it has",
nrow(update), "instead.")} else {
"Everything checks out, the update has 22 rows"}
##############################################################################
## Add (or overwrite) new rows to master #####################################
##############################################################################
# add update for Wales - if that year already exists, it will be overwritten!!!
master %>%
anti_join(update, by = c("country", "auth.name", "year")) %>%
bind_rows(update) -> master
# save updated datafile to master
saveRDS(master, "data/03-processed/master.rds")
write.csv(master, "outputs/csv-tables/master.csv")
##############################################################################
# add new files to bibliography master #######################################
##############################################################################
# add new date.accessed to bibliography master
bib.master %>%
mutate(urldate = ifelse(country == "Wales", new.date.accessed,
urldate),
year = ifelse(country == "Wales",
as.numeric(format(Sys.Date(), "%Y")), year)) -> bib.master
# update RPI data access date and year of publication
bib.master %>%
mutate(urldate = ifelse(content == "rpi",
as.character(format(Sys.Date(), "%d.%m.%Y")), urldate),
year = ifelse(content == "rpi",
as.numeric(format(Sys.Date(), "%Y")), year)) ->
bib.master
# save updated datafile to master
saveRDS(bib.master, "data/03-processed/bib.master.rds")
}
# update RPI data acces date and year of publication
bib.master %>%
mutate(urldate = ifelse(content == "rpi",
as.character(format(Sys.Date(), "%d.%m.%Y")), urldate),
year = ifelse(content == "rpi",
as.numeric(format(Sys.Date(), "%Y")), year)) ->
bib.master
# save updated datafile to master
saveRDS(bib.master, "data/03-processed/bib.master.rds")
# create a bibliography for the wales report
bib.master %>%
filter(fiscyear > current.year - 5, !content %in% c("budget", "pcn", "wpl")) %>%
group_by(country) %>%
filter(country %in% c("GB","Wales") | country %in% c("England","Scotland") & fiscyear == max(fiscyear)) %>%
mutate(refs = paste0("@", key)) %>%
column_to_rownames("key") -> bib.wales
# crete the wales bibliography
bib.wales %>%
as.BibEntry() %>%
WriteBib(file = "code/report-rmds/wales.bib",
biblatex = FALSE, verbose = FALSE)
# also save the data frame
saveRDS(bib.wales, paste0("data/03-processed/", report.name, "-bib.rds"))
if(nrow(filter(master, country == "Wales", year == current.year)) == 0) {
warning("There are no records for the year ", current.year) } else {
if(nrow(filter(master, country == "Wales", year == current.year)) != 22) {
warning("Something has gone wrong. There should be 22 rows for ",
current.year, " but there are not. I suggest you revert to a ",
"previous version of the repository and try again.")} else {
if(!recompile.rmd){
# create a fresh copy of the wales report template
file.copy("code/report-templates/wales-report-template.Rmd",
paste0("code/report-rmds/", report.name, ".Rmd"),
overwrite = TRUE)}
# compile the report (but check if file exists first)
if(recompile.rmd & !file.exists(paste0("code/report-rmds/",
report.name, ".Rmd"))){
warning("The Rmd file does not exist. Rerun this script with ",
"recompile.rmd swithced to FALSE.")} else {
# compile the report - you can repeat this as many times as you like after
# updating the .Rmd file
params = list("current.year" = current.year,
"dp.text" = dp.text,
"dp.tables" = dp.tables)
knitr::knit(input = paste0("code/report-rmds/", report.name, ".Rmd"),
output= paste0("outputs/reports/",report.name, ".pdf"))
# remove empty folder that the compilation creates
unlink(paste0("outputs/reports/", report.name, "_files"), recursive=TRUE)
# remove log file (comment this out if there are issues and look at the log
# file for clues?
suppressWarnings(file.remove(paste0("code/report-rmds/", report.name, ".log")))
}
}
}
pacman::p_load( tidyr,dplyr,tibble,RefManageR,googlesheets4,knitr)
# load existing master file
master <- readRDS("data/03-processed/master.rds")
bib.master <- readRDS("data/03-processed/bib.master.rds")
# new report name
report.name <- paste0("wales-report-", current.year, "-",
current.year - 1999)
if (!file.exists("data/01-raw/rpi.csv") |
format(file.mtime("data/01-raw/rpi.csv"), "%d.%m.%Y") !=
format(Sys.Date(), "%d.%m.%Y")) {
url <- paste0("https://docs.google.com/spreadsheets/d/",
"1joRISS6YV3eusMNgFPaHfrtsiPN1skM-mpEZJqD3FUg/",
"edit?pli=1#gid=1538913200")
rpi<-read_sheet(url, sheet = "Inflation, last 10 years")
names(rpi)[2]<-"Cost.of.Living"
write.csv(rpi,"data/01-raw/rpi.csv")
}
if (add.new.data){
################################################################################
## AUTOMATIC DATA IMPORT AND CLEANING
################################################################################
path <- "data/01-raw/"
# read all expenditure data, remove extra row and column
wal.income.total <- read.csv(paste0(path, wal.income.file))[-1,-1]
# read all income data, remove extra row and column
wal.expend.total <- read.csv(paste0(path, wal.expenditure.file))[-1,-1]
# read all transport total data, remove extra row and column
wal.transport.total <- read.csv(paste0(path, wal.transport.file))[-1,-1]
# reshape all three dfs - you can ignore the warnigns here!
wal.expend.total<- FunWalesReshape(wal.expend.total)
wal.income.total<- FunWalesReshape(wal.income.total)
wal.transport.total<- FunWalesReshape(wal.transport.total)
# join them together and calculate surplus
wal.expend.total %>%
left_join(wal.income.total) %>%
left_join(wal.transport.total) %>%
mutate(income.total = -income.total,
surplus.total = income.total - expend.total) %>%
filter(year == current.year) -> update
# add Wales specific data
update %>%
mutate(country = "Wales",
auth.type = "LA")  -> update
# double check the update is OK:
if (nrow(update) != 22) {
paste("Something is wrong. The update should have 22 rows, but it has",
nrow(update), "instead.")} else {
"Everything checks out, the update has 22 rows"}
##############################################################################
## Add (or overwrite) new rows to master #####################################
##############################################################################
# add update for Wales - if that year already exists, it will be overwritten!!!
master %>%
anti_join(update, by = c("country", "auth.name", "year")) %>%
bind_rows(update) -> master
# save updated datafile to master
saveRDS(master, "data/03-processed/master.rds")
write.csv(master, "outputs/csv-tables/master.csv")
##############################################################################
# add new files to bibliography master #######################################
##############################################################################
# add new date.accessed to bibliography master
bib.master %>%
mutate(urldate = ifelse(country == "Wales", new.date.accessed,
urldate),
year = ifelse(country == "Wales",
as.numeric(format(Sys.Date(), "%Y")), year)) -> bib.master
# update RPI data access date and year of publication
bib.master %>%
mutate(urldate = ifelse(content == "rpi",
as.character(format(Sys.Date(), "%d.%m.%Y")), urldate),
year = ifelse(content == "rpi",
as.numeric(format(Sys.Date(), "%Y")), year)) ->
bib.master
# save updated datafile to master
saveRDS(bib.master, "data/03-processed/bib.master.rds")
}
# update RPI data acces date and year of publication
bib.master %>%
mutate(urldate = ifelse(content == "rpi",
as.character(format(Sys.Date(), "%d.%m.%Y")), urldate),
year = ifelse(content == "rpi",
as.numeric(format(Sys.Date(), "%Y")), year)) ->
bib.master
# save updated datafile to master
saveRDS(bib.master, "data/03-processed/bib.master.rds")
# create a bibliography for the wales report
bib.master %>%
filter(fiscyear > current.year - 5, !content %in% c("budget", "pcn", "wpl")) %>%
group_by(country) %>%
filter(country %in% c("GB","Wales") | country %in% c("England","Scotland") & fiscyear == max(fiscyear)) %>%
mutate(refs = paste0("@", key)) %>%
column_to_rownames("key") -> bib.wales
# crete the wales bibliography
bib.wales %>%
as.BibEntry() %>%
WriteBib(file = "code/report-rmds/wales.bib",
biblatex = FALSE, verbose = FALSE)
# also save the data frame
saveRDS(bib.wales, paste0("data/03-processed/", report.name, "-bib.rds"))
if(nrow(filter(master, country == "Wales", year == current.year)) == 0) {
warning("There are no records for the year ", current.year) } else {
if(nrow(filter(master, country == "Wales", year == current.year)) != 22) {
warning("Something has gone wrong. There should be 22 rows for ",
current.year, " but there are not. I suggest you revert to a ",
"previous version of the repository and try again.")} else {
if(!recompile.rmd){
# create a fresh copy of the wales report template
file.copy("code/report-templates/wales-report-template.Rmd",
paste0("code/report-rmds/", report.name, ".Rmd"),
overwrite = TRUE)}
# compile the report (but check if file exists first)
if(recompile.rmd & !file.exists(paste0("code/report-rmds/",
report.name, ".Rmd"))){
warning("The Rmd file does not exist. Rerun this script with ",
"recompile.rmd swithced to FALSE.")} else {
# compile the report - you can repeat this as many times as you like after
# updating the .Rmd file
params = list("current.year" = current.year,
"dp.text" = dp.text,
"dp.tables" = dp.tables)
knitr::knit(input = paste0("code/report-rmds/", report.name, ".Rmd"),
output= paste0("outputs/reports/",report.name, ".pdf"))
# remove empty folder that the compilation creates
unlink(paste0("outputs/reports/", report.name, "_files"), recursive=TRUE)
# remove log file (comment this out if there are issues and look at the log
# file for clues?
suppressWarnings(file.remove(paste0("code/report-rmds/", report.name, ".log")))
}
}
}
if(nrow(filter(master, country == "Wales", year == current.year)) == 0) {
warning("There are no records for the year ", current.year) } else {
if(nrow(filter(master, country == "Wales", year == current.year)) != 22) {
warning("Something has gone wrong. There should be 22 rows for ",
current.year, " but there are not. I suggest you revert to a ",
"previous version of the repository and try again.")} else {
if(!recompile.rmd){
# create a fresh copy of the wales report template
file.copy("code/report-templates/wales-report-template.Rmd",
paste0("code/report-rmds/", report.name, ".Rmd"),
overwrite = TRUE)}
# compile the report (but check if file exists first)
if(recompile.rmd & !file.exists(paste0("code/report-rmds/",
report.name, ".Rmd"))){
warning("The Rmd file does not exist. Rerun this script with ",
"recompile.rmd swithced to FALSE.")} else {
# compile the report - you can repeat this as many times as you like after
# updating the .Rmd file
params = list("current.year" = current.year,
"dp.text" = dp.text,
"dp.tables" = dp.tables)
knitr::knit(input = paste0("code/report-rmds/", report.name, ".Rmd"),
output= paste0("outputs/reports/",report.name, ".pdf"))
# remove empty folder that the compilation creates
unlink(paste0("outputs/reports/", report.name, "_files"), recursive=TRUE)
# remove log file (comment this out if there are issues and look at the log
# file for clues?
suppressWarnings(file.remove(paste0("code/report-rmds/", report.name, ".log")))
}
}
}
# create a fresh copy of the wales report template
file.copy("code/report-templates/wales-report-template.Rmd",
paste0("code/report-rmds/", report.name, ".Rmd"),
overwrite = TRUE)}
file.copy("code/report-templates/wales-report-template.Rmd",
paste0("code/report-rmds/", report.name, ".Rmd"),
overwrite = TRUE)
params = list("current.year" = current.year,
"dp.text" = dp.text,
"dp.tables" = dp.tables)
knitr::knit(input = paste0("code/report-rmds/", report.name, ".Rmd"),
output= paste0("outputs/reports/",report.name, ".pdf"))
source(here::here("code/do-not-touch-scripts/wales.R"))
pacman::p_load( tidyr,dplyr,tibble,RefManageR,googlesheets4,knitr,here)
knitr::knit(input = paste0("code/report-rmds/", report.name, ".Rmd"),
output= paste0("outputs/reports/",report.name, ".pdf"))
source(here::here("code/do-not-touch-scripts/wales.R"))
pacman::p_load( tidyr,dplyr,tibble,RefManageR,googlesheets4,knitr,here,kableExtra)
knitr::knit(input = paste0("code/report-rmds/", report.name, ".Rmd"),
output= paste0("outputs/reports/",report.name, ".pdf"))
source(here::here("code/do-not-touch-scripts/wales.R"))
pacman::p_load( tidyr,dplyr,tibble,RefManageR,googlesheets4,knitr,here,kableExtra,showtext)
source(here::here("code/do-not-touch-scripts/wales.R"))
pacman::p_load( tidyr,dplyr,tibble,RefManageR,googlesheets4,knitr,here,kableExtra,showtext,sf)
source(here::here("code/do-not-touch-scripts/wales.R"))
pacman::p_load( tidyr,dplyr,tibble,RefManageR,googlesheets4,knitr,here,kableExtra,showtext,sf,viridis)
source(here::here("code/do-not-touch-scripts/wales.R"))
knitr::knit(input = paste0("code/report-rmds/", report.name, ".Rmd"),
output= paste0("outputs/reports/",report.name, ".pdf"))
if(nrow(filter(master, country == "Wales", year == current.year)) == 0) {
warning("There are no records for the year ", current.year) } else {
if(nrow(filter(master, country == "Wales", year == current.year)) != 22) {
warning("Something has gone wrong. There should be 22 rows for ",
current.year, " but there are not. I suggest you revert to a ",
"previous version of the repository and try again.")} else {
if(!recompile.rmd){
# create a fresh copy of the wales report template
file.copy("code/report-templates/wales-report-template.Rmd",
paste0("code/report-rmds/", report.name, ".Rmd"),
overwrite = TRUE)}
# compile the report (but check if file exists first)
if(recompile.rmd & !file.exists(paste0("code/report-rmds/",
report.name, ".Rmd"))){
warning("The Rmd file does not exist. Rerun this script with ",
"recompile.rmd swithced to FALSE.")} else {
# compile the report - you can repeat this as many times as you like after
# updating the .Rmd file
params = list("current.year" = current.year,
"dp.text" = dp.text,
"dp.tables" = dp.tables)
knitr::knit(input = paste0("code/report-rmds/", report.name, ".Rmd"),
output= paste0("outputs/reports/",report.name, ".pdf"))
# remove empty folder that the compilation creates
unlink(paste0("outputs/reports/", report.name, "_files"), recursive=TRUE)
# remove log file (comment this out if there are issues and look at the log
# file for clues?
suppressWarnings(file.remove(paste0("code/report-rmds/", report.name, ".log")))
}
}
}
source(here::here("code/do-not-touch-scripts/wales.R"))
paste("Local Authority Parking Finances in Wales", params$current.year, "-", params$current.year-1999)
paste("Local Authority Parking Finances in Wales", params$current.year, "-", params$current.year-1999)
paste("Local Authority Parking Finances in Wales", params$current.year, "-", params$current.year-1999)
paste("Local Authority Parking Finances in Wales", params$current.year, "-", params$current.year-1999)
paste0(bib$refs, collapse = ", ")
\renewcommand{\arraystretch}{1.2}
# Introduction
This note covers parking finances for the 22 local authorities in Wales. As in England and Scotland, local authorities are required to submit details of all their finances to the Welsh Government in a standard format. They are normally published in October, seven months after the financial year end. This report looks at the section on parking income and expenditure from `r FunFisc(4)` to `r FunFisc()` and is based primarily on data reported by Statistics for Wales (`r bib[bib$country == "Wales",]$refs`), as well as data reported by English and Scottish Local Government authorities; all of the sources are listed in the references.[^1]
wal.summary.formatted %>%
kbl( "latex",
booktabs = T,
digits = dp.tables,
longtable = TRUE,
escape = F,
align = c("r"),
caption = "Summary of parking accounts for Wales (£ millions)",
col.names = linebreak(c("", "", yearz, paste0("Change\n", current.year, "-",
current.year-1999, "\non\n",
current.year-1, "-",
current.year-1999-1)),align="c")) %>%
collapse_rows(columns = 1, latex_hline = "major", valign = "middle") %>%
kable_styling(font_size = 10,latex_options =c("HOLD_position", "repeat_header")) %>%
column_spec(1:2, width = "3cm")
pacman::p_load( tidyr,dplyr,tibble,RefManageR,googlesheets4,knitr,here,kableExtra,showtext,sf,viridis,bookdown)
# load existing master file
master <- readRDS("data/03-processed/master.rds")
bib.master <- readRDS("data/03-processed/bib.master.rds")
# new report name
report.name <- paste0("wales-report-", current.year, "-",
current.year - 1999)
if (!file.exists("data/01-raw/rpi.csv") |
format(file.mtime("data/01-raw/rpi.csv"), "%d.%m.%Y") !=
format(Sys.Date(), "%d.%m.%Y")) {
url <- paste0("https://docs.google.com/spreadsheets/d/",
"1joRISS6YV3eusMNgFPaHfrtsiPN1skM-mpEZJqD3FUg/",
"edit?pli=1#gid=1538913200")
rpi<-read_sheet(url, sheet = "Inflation, last 10 years")
names(rpi)[2]<-"Cost.of.Living"
write.csv(rpi,"data/01-raw/rpi.csv")
}
if (add.new.data){
################################################################################
## AUTOMATIC DATA IMPORT AND CLEANING
################################################################################
path <- "data/01-raw/"
# read all expenditure data, remove extra row and column
wal.income.total <- read.csv(paste0(path, wal.income.file))[-1,-1]
# read all income data, remove extra row and column
wal.expend.total <- read.csv(paste0(path, wal.expenditure.file))[-1,-1]
# read all transport total data, remove extra row and column
wal.transport.total <- read.csv(paste0(path, wal.transport.file))[-1,-1]
# reshape all three dfs - you can ignore the warnigns here!
wal.expend.total<- FunWalesReshape(wal.expend.total)
wal.income.total<- FunWalesReshape(wal.income.total)
wal.transport.total<- FunWalesReshape(wal.transport.total)
# join them together and calculate surplus
wal.expend.total %>%
left_join(wal.income.total) %>%
left_join(wal.transport.total) %>%
mutate(income.total = -income.total,
surplus.total = income.total - expend.total) %>%
filter(year == current.year) -> update
# add Wales specific data
update %>%
mutate(country = "Wales",
auth.type = "LA")  -> update
# double check the update is OK:
if (nrow(update) != 22) {
paste("Something is wrong. The update should have 22 rows, but it has",
nrow(update), "instead.")} else {
"Everything checks out, the update has 22 rows"}
##############################################################################
## Add (or overwrite) new rows to master #####################################
##############################################################################
# add update for Wales - if that year already exists, it will be overwritten!!!
master %>%
anti_join(update, by = c("country", "auth.name", "year")) %>%
bind_rows(update) -> master
# save updated datafile to master
saveRDS(master, "data/03-processed/master.rds")
write.csv(master, "outputs/csv-tables/master.csv")
##############################################################################
# add new files to bibliography master #######################################
##############################################################################
# add new date.accessed to bibliography master
bib.master %>%
mutate(urldate = ifelse(country == "Wales", new.date.accessed,
urldate),
year = ifelse(country == "Wales",
as.numeric(format(Sys.Date(), "%Y")), year)) -> bib.master
# update RPI data access date and year of publication
bib.master %>%
mutate(urldate = ifelse(content == "rpi",
as.character(format(Sys.Date(), "%d.%m.%Y")), urldate),
year = ifelse(content == "rpi",
as.numeric(format(Sys.Date(), "%Y")), year)) ->
bib.master
# save updated datafile to master
saveRDS(bib.master, "data/03-processed/bib.master.rds")
}
# update RPI data acces date and year of publication
bib.master %>%
mutate(urldate = ifelse(content == "rpi",
as.character(format(Sys.Date(), "%d.%m.%Y")), urldate),
year = ifelse(content == "rpi",
as.numeric(format(Sys.Date(), "%Y")), year)) ->
bib.master
# save updated datafile to master
saveRDS(bib.master, "data/03-processed/bib.master.rds")
# create a bibliography for the wales report
bib.master %>%
filter(fiscyear > current.year - 5, !content %in% c("budget", "pcn", "wpl")) %>%
group_by(country) %>%
filter(country %in% c("GB","Wales") | country %in% c("England","Scotland") & fiscyear == max(fiscyear)) %>%
mutate(refs = paste0("@", key)) %>%
column_to_rownames("key") -> bib.wales
# crete the wales bibliography
bib.wales %>%
as.BibEntry() %>%
WriteBib(file = "code/report-rmds/wales.bib",
biblatex = FALSE, verbose = FALSE)
# also save the data frame
saveRDS(bib.wales, paste0("data/03-processed/", report.name, "-bib.rds"))
if(nrow(filter(master, country == "Wales", year == current.year)) == 0) {
warning("There are no records for the year ", current.year) } else {
if(nrow(filter(master, country == "Wales", year == current.year)) != 22) {
warning("Something has gone wrong. There should be 22 rows for ",
current.year, " but there are not. I suggest you revert to a ",
"previous version of the repository and try again.")} else {
if(!recompile.rmd){
# create a fresh copy of the wales report template
file.copy("code/report-templates/wales-report-template.Rmd",
paste0("code/report-rmds/", report.name, ".Rmd"),
overwrite = TRUE)}
# compile the report (but check if file exists first)
if(recompile.rmd & !file.exists(paste0("code/report-rmds/",
report.name, ".Rmd"))){
warning("The Rmd file does not exist. Rerun this script with ",
"recompile.rmd swithced to FALSE.")} else {
# compile the report - you can repeat this as many times as you like after
# updating the .Rmd file
params = list("current.year" = current.year,
"dp.text" = dp.text,
"dp.tables" = dp.tables)
knitr::knit(input = paste0("code/report-rmds/", report.name, ".Rmd"),
output= paste0("outputs/reports/",report.name, ".pdf"))
# remove empty folder that the compilation creates
unlink(paste0("outputs/reports/", report.name, "_files"), recursive=TRUE)
# remove log file (comment this out if there are issues and look at the log
# file for clues?
suppressWarnings(file.remove(paste0("code/report-rmds/", report.name, ".log")))
}
}
}
